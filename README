Limbo PC Emulator (QEMU x86) for Android    

"And so, I captured this fancy, where all that we see, or seem, 
is but a dream within a dream." Edgar Allan Poe

A Big Thanks to:
Fabrice Bellard http://bellard.org
Qemu team http://wiki.qemu.org/Main_Page
Glib team http://developer.gnome.org/glib
Iconv team http://www.gnu.org/software/libiconv
Libsdl team http://www.libsdl.org
Libjpeg team http://libjpeg.sourceforge.net
Libpng team http://www.libpng.org
Mikmod team http://mikmod.shlomifish.org
Libtremor team http://xiph.org/vorbis
Freetype team http://www.freetype.org
Android-vnc-viewer team http://code.google.com/p/android-vnc-viewer

Special contributions:
Yair Lifshitz (port for x86 phones)

================================================================================

1. What is Limbo?

Limbo is a QEMU-based emulator for Android. It currently supports PC emulation 
for Intel x86 architecture.
For more information visit:
https://code.google.com/p/limbo-android/
    

===============================================================================

2. Requirements:

    Android SDK
    Android NDK r8
    Eclipse + Eclipse Android plugin or Netbeans + Android plugin
    An Android device (most stock/custom roms should be compatible)

===============================================================================

3. Known Issues:
	See https://code.google.com/p/limbo-android/issues/list
	
===============================================================================
3. Setup

    Configure variables for toolchain and NDK directories for your device
     in jni/android-toolchain.mak.

===============================================================================
4. Build

    a. To build the app make sure you're under the root directory:
        $> cd /home/youraccount/.../limbo-android

    b. Build the static and shared libraries (libqemu-img.so & 
       libqemu-system-i386.so):
        
        Change directory to ./jni and type:
        make release-arm
        
        for x86 phones:
        make release-x86
        
    c. Build the Android APK (Limbo.apk) from Eclipse or Netbeans.
    		 
    	** Make sure the *.so libraries are zipped in the final .apk
    	(Eclipse should do that automatically) 

===============================================================================
5. Run
	a. Recommend installing a full Qwerty keyboard for Android (ie Hacker's keyboard 
		from the Google Android store) 
	b. Start the Limbo app and choose CPU, Memory (~8-64MB),etc..
	c. Choose a bootable disk image(s) for CDRom, Floppy, and a HDD image
	d. Start the virtual machine.
    e. Have fun!
    	
===============================================================================
6. License
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

===============================================================================
Changelog:

Limbo v0.9.5 (Jan 19, 2013)
- Fixed Mouse relative position for SDL
- Enabled SMP mode (multi-core emulation)

Limbo v0.9.4 (Jan 6, 2013)
- Increased RAM Memory to 1GB.
- New SDL User Interface.
- Enabled External Mouse (Bluetooth)
- Sound Emulation for SB16 (only under SDL Interface)
- Fixed Keyboard CTRL,ALT keys and removed extra screens for VNC

Limbo v0.9.3 (Nov 3, 2012)
- Fixed crash issues while copying files inside VM, using sigaltstack instead of gthread.
- Fixed issue with canceling image selection and enabled ejection of media (CD, Floppy).
- Fixed some crashes due to pointer outside of VNC area.
- File manager now detects VHD file format as well.
- Some performance enhancements. Fixed issue with optimization for cpu-exec.c and using gcc-4.6 for ARM build this fixes.
- Enabled Multithreaded AIO option for Android 3.0 devices, this should speed up 
  disk I/O inside the virtual machine.
- Fixed memory.h compilation issue (patch provided by Yair Lifshitz).
- Fixed load linker errors with stdio.h (patch provided by Yair Lifshitz).
- Port for x86 phones (patch provided by Yair Lifshitz).

Limbo v0.9.2 (Oct 10, 2012)
- Fixed issue with booting HDD images, removed TSC features for now
- Fixed dlfree issue for ICS devices, removed optimization (-O3) for gmem.c
- Fixed issue with browsing CD ROM and Floppy images while VM is running
- Fixed timing issue while getting status
- Enabled Mouse Double click with "Double tap"
- Enabled Mouse Right click with "2-Finger Long Press"
- Removed resolv.conf, DNS server is now configurable within Limbo UI
- Some minor UI enhancements
- Enabled Graphics Hardware Acceleration for Android 3.0+ devices
- Enabled Large Heap for Better Performance

Limbo v0.9.1b-2 (Sep 15, 2012)
- Fixed Issue with app hanging at "Connecting to VM Console". SIGUSR1 is blocked by Dalvik VM.
- Fixed issue while resizing VNC screen
- Added global /sdcard/limbo/etc/resolv.conf - Default is Google DNS servers
- Removed n120x network device - wrong device name
- Added missing keyboard mappings - F1-F12, ESC
- Some minor UI enhancements
- Changed optimization for glib compilation (-O3)

Limbo v0.9.1a (Jun 24, 2012)

Target Support:
- CPU/ARCH = i386/x86_64 - (486/PI,PII,PIII,Athlon,Atom n270,Dual Core,Phenom)
- CDROM disk images - (.img raw images read/write/bootable)
- Floopy disk images - (.iso images read/bootable)
- IDE hard disk images - (raw, qcow are detected and bootable but unreliable)
- VGA - (standard, cirrus, VMWare)
- Net - (User/NAT mode) only
- UI - VNC interface only (No SDL interface).

Host support:
- VNC connectivity
- UI Configurable parameters for device management
   

===============================================================================

Copyright © 2012 Max Kastanas

Endofdoc
